---
title: "Project Proposal"
Names: "Caroline & Eli"
format: html
editor: visual
---

## Data Set 1:

```{r install packages}
#Install Packages
library(polite)
library(rvest)
library(tibble)
library(tidyverse)
library(dplyr)
library(reticulate)
path_to_python <- "/Users/Eli/anaconda3/python.exe"
use_python(path_to_python)
```

```{r load data}
#Loading the dataset
load("36368-0001-Data.rda")
econ_clim_data <- as.data.frame(da36368.0001)
View(econ_clim_data)
```

```{r}
#Creating a dataframe with only our necessary variables

working_dataset <- econ_clim_data %>% select("WAVE_NUMBER", "INTL_ECONOMICIMPACT", "STATE_VEHICLES_V1","STATE_VEHICLES_V2","CARBONTAX_COST10PCT","CARBONTAX_COST15DOL","CARBONTAX_COST50DOL", "STATE_RPS_ECONOMY","GW_BELIEF","GW_CONCERN","BELIEVER_IMMEDIACY","GOVT_EFFECTIVENESS","GOVT_FED","STATE_NEIGHBORSACT","GASTAX_GOVT","FFTAX_GOVT","CAPTRADE_GOVT_V1","GOVT_EFFECTIVENESS_V2","GOVT_EFFECTIVENESS","STATE_RPS_V1","STATE_RPS_V2","STATE_RPS_V2_COST100","STATE_RPS_V3","STATE_RPS_V3_COST25","STATE_RPS_V3_COST50","DEMOG_EDU","DEMOG_POLVIEWS","DEMOG_RELIG")

View(working_dataset)
```

```{r}
#Summary Table for our dataset
summary_table <- summary(working_dataset)
View(summary_table)
#Not sure if this is the absolute best looking method but it does provide a complete summary
```

```{r demog_polviews -> state_rps_economy graph}
eco_by_polview <- as.data.frame(table(working_dataset$DEMOG_POLVIEWS, working_dataset$STATE_RPS_ECONOMY))
colnames(eco_by_polview) <- c("POLVIEWS", "STATE_ECO", "Count")

eco_by_polview <- eco_by_polview %>%
  spread(key = STATE_ECO, value = Count, fill = 0)

eco_by_polview <- eco_by_polview %>%
  pivot_longer(cols = c("(1) Strongly agree", "(2) Somewhat agree", "(3) Somewhat disagree", "(4) Strongly disagree"), names_to = "STATE_ECO", values_to = "Count")

polviews_state_eco <- eco_by_polview %>% ggplot(aes(x=POLVIEWS, y=Count, fill = STATE_ECO)) + geom_bar(stat = "identity", position = "dodge") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
        axis.title.y = element_text(size = 7))+
  labs(x="Political Views", y="Count of Answers to \"renewable energies grow economies\"")
polviews_state_eco
```

```{r clean dates}
working_dataset <- working_dataset %>% mutate(WAVE_NUMBER = (sub('.*(?=.....$)', '', WAVE_NUMBER, perl=T)) %>%
                                                paste("/01/01", sep="")
                                              )
```

```{r date and international economic impact}
date_intl_graph <- working_dataset[working_dataset$STATE_RPS_ECONOMY %in% c("(1) Strongly agree", "(2) Somewhat agree", "(3) Somewhat disagree", "(4) Strongly disagree"),]


date_intl_eco <- date_intl_graph %>% ggplot(aes(x=WAVE_NUMBER, y=STATE_RPS_ECONOMY, fill = STATE_RPS_ECONOMY)) + 
  geom_col(position = "stack") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
        axis.text.y=element_blank()) +
  labs(x="year", y="renewable energies grow economies")
date_intl_eco
```

```{python tree}
import pandas as pd
import numpy as np
from sklearn.compose import make_column_transformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.compose import make_column_transformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.model_selection import train_test_split

tree_df = r.working_dataset[['DEMOG_POLVIEWS', 'DEMOG_EDU', 'INTL_ECONOMICIMPACT']].copy()

tree_df['DEMOG_POLVIEWS'] = pd.Categorical(tree_df['DEMOG_POLVIEWS'])
tree_df['DEMOG_EDU'] = pd.Categorical(tree_df['DEMOG_EDU'])
tree_df['INTL_ECONOMICIMPACT'] = pd.Categorical(tree_df['INTL_ECONOMICIMPACT'])

tree_df = tree_df.dropna().reset_index(drop=True)

# create X and y, now with rank
X = tree_df[['DEMOG_POLVIEWS', 'DEMOG_EDU']]
y = tree_df.INTL_ECONOMICIMPACT

# create train-test split
X_train, X_test, y_train, y_test = train_test_split(
  X, y, test_size = 0.25, random_state = 2010) 

# one hot encoding
preprocessor = make_column_transformer(
  (OneHotEncoder(drop = 'if_binary'), ['DEMOG_EDU']),
  remainder = 'passthrough',
  verbose_feature_names_out = False
)

from sklearn.tree import DecisionTreeClassifier
from sklearn.pipeline import Pipeline

five_leaves_class = Pipeline([
  ("preprocessor", preprocessor),
  ("tree", DecisionTreeClassifier(max_leaf_nodes = 5, random_state = 0))
  ]).fit(X_train, y_train)
  
features_name = five_leaves_class['preprocessor'].get_feature_names_out()

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import plot_tree

fig, ax = plt.subplots()
plot_tree(
  five_leaves_class['tree'], ax = ax, impurity = False,
  feature_names = features_name)
plt.show()
plt.close()
```
